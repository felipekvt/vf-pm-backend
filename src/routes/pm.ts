import { Router } from 'express';import { prisma } from '../db';import { auth } from '../index';const r=Router();r.post('/',auth,async(req:any,res)=>{const {assetId,name,everyDays}=req.body||{};if(!assetId||!name||!everyDays)return res.status(400).json({error:'assetId, name, everyDays obrigatórios'});const pm=await prisma.pMPlan.create({data:{orgId:req.orgId,assetId,name,everyDays}});res.status(201).json(pm);});r.post('/run',auth,async(req:any,res)=>{const now=new Date();const plans=await prisma.pMPlan.findMany({where:{orgId:req.orgId}});let count=0;const anyUser=await prisma.membership.findFirst({where:{orgId:req.orgId}});for(const p of plans){const due=!p.lastRun||(Date.now()-new Date(p.lastRun).getTime())/86400000>=p.everyDays;if(due){await prisma.workOrder.create({data:{orgId:req.orgId,assetId:p.assetId,title:`PM: ${p.name}`,description:'OS aberta automaticamente pelo plano de manutenção',createdById:anyUser!.userId}});await prisma.pMPlan.update({where:{id:p.id},data:{lastRun:now}});count++;}}res.json({opened:count});});export default r;