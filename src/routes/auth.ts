import { Router } from 'express';import { prisma } from '../db';import bcrypt from 'bcryptjs';import { z } from 'zod';import jwt from 'jsonwebtoken';const router=Router();const JWT_SECRET=process.env.JWT_SECRET||'dev-secret';const signupSchema=z.object({name:z.string().min(2),email:z.string().email(),password:z.string().min(6)});router.post('/signup',async(req,res)=>{const parsed=signupSchema.safeParse(req.body);if(!parsed.success)return res.status(400).json({error:parsed.error.flatten()});const {name,email,password}=parsed.data;const exists=await prisma.user.findUnique({where:{email}});if(exists)return res.status(409).json({error:'E-mail já cadastrado'});const hash=await bcrypt.hash(password,10);const user=await prisma.user.create({data:{name,email,password:hash}});const org=await prisma.organization.create({data:{name:`${name} Org`}});await prisma.membership.create({data:{userId:user.id,orgId:org.id,role:'ADMIN'}});const token=jwt.sign({sub:user.id,orgId:org.id},JWT_SECRET,{expiresIn:'7d'});return res.status(201).json({ok:true,id:user.id,token,name:user.name,orgId:org.id});});router.post('/login',async(req,res)=>{const {email,password}=req.body||{};if(!email||!password)return res.status(400).json({error:'email e password são obrigatórios'});const user=await prisma.user.findUnique({where:{email}});if(!user)return res.status(401).json({error:'Credenciais inválidas'});const ok=await bcrypt.compare(password,user.password);if(!ok)return res.status(401).json({error:'Credenciais inválidas'});const m=await prisma.membership.findFirst({where:{userId:user.id}});const token=jwt.sign({sub:user.id,orgId:m?.orgId},JWT_SECRET,{expiresIn:'7d'});return res.json({token,name:user.name,orgId:m?.orgId});});export default router;